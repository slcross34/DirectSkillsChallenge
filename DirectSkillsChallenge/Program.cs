// <auto-generated/>
using HtmlAgilityPack;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;



namespace DirectSkillsChallenge
{
    internal class Program
    {
        static void Main(string[] args)
        {
           for (int i = 1; i <101; i++)
            {
                if (i%3 == 0 && i % 5 == 0)
                {
                    Console.WriteLine(" DirectEmployers ");
                }
                else if (i % 3 == 0)
                {
                    Console.WriteLine(" Direct ");
                }
                else if (i % 5 == 0)
                {
                    Console.WriteLine(" Employers ");
                }
                else { Console.WriteLine(" " + i.ToString() + " ");
                }

            }
            Console.WriteLine("Enter reverse testable string:");
            string testReverse = Console.ReadLine();
            Console.WriteLine(ReverseOrder(testReverse));
            Console.WriteLine("Enter reverse testable string:");
            testReverse = Console.ReadLine();
            Console.WriteLine(ReverseOrderAlternate(testReverse));
            List<string> listOfSites = new List<string>();
            Console.WriteLine("First Pass - Deleted");
            listOfSites = printLinks("https://dejobs.org/jobs/feed/json?num_items=10");
            //Console.WriteLine("Second Pass");
            foreach (string siteLink in listOfSites)
            {
                Console.WriteLine(siteLink);
            }

            //External Class call with same functionality
            LinkParserFromURL urlClassTest = new LinkParserFromURL("https://dejobs.org/jobs/feed/json?num_items=10");
            List<string> listOfSitesFromClass = new List<string>();
            Console.WriteLine("Third Pass");
            listOfSitesFromClass = urlClassTest.CaptureLinks();

            LinkParserFromURLJSON urlClassTestJSON = new LinkParserFromURLJSON("https://dejobs.org/jobs/feed/json?num_items=10");
            //List<string> listOfSitesFromClass = new List<string>();
            Console.WriteLine("JSON Pass");
            int response = urlClassTestJSON.CaptureLinks();




        }

        public static string ReverseOrder(string inValue) 
        {
            char[] convertedToChars = inValue.ToCharArray();
            string outValue = "";
            int strLength = inValue.Length;
            for (int i = strLength; i > 0; i--)
            {
                outValue += convertedToChars[i-1];
            }
            return outValue;
        }
        public static string ReverseOrderAlternate(string inValue)
        {
            if (inValue == null) return null;
            char[] convertedToChars = inValue.ToCharArray();
            Array.Reverse(convertedToChars);
            string outValue = new string(convertedToChars);
            return outValue;
        }


        public static List<string> printLinks(string htmlIn)
        {
            List<string> links = new List<string>();

            using (HttpClient webClient = new HttpClient())
            {
                using (HttpResponseMessage webDoc = webClient.GetAsync(htmlIn).Result)
                {
                    if (webDoc.StatusCode == HttpStatusCode.OK)
                    {
                        using (HttpContent webContent = webDoc.Content)
                        {
                            string webHtml = webContent.ReadAsStringAsync().Result;
                            //Console.WriteLine(webHtml);
                            foreach (Match m in Regex.Matches(webHtml, @"url"))
                            {
                                int firstBracket = webHtml.IndexOf("http://", m.Index);
                                int lastBracket = webHtml.IndexOf("}", m.Index);
                                //Console.WriteLine(string.Format("Link {0} at {1}", m.Value, m.Index));
                                Console.WriteLine(webHtml.Substring(firstBracket, lastBracket - (firstBracket + 1)));
                                links.Add(webHtml.Substring(firstBracket, lastBracket - (firstBracket + 1))); 
                            }
                        }
                    }
                }
            }
            return links;
        }
    }
}